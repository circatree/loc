# Docker-compose file is used only for local development. This is not production-ready example.

version: '3.8'

volumes:
  db-data: {}
  redis-data: {}
  tmp-data: {}

services:
  app: &app
    image: steveoliver/laravel-roadrunner:v0.1.1
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    user: "${APP_UID:-10001}:${APP_GID:-10001}"
    environment:
      PS1: '\[\033[1;32m\]\[\033[1;36m\][\u@\h] \[\033[1;34m\]\w\[\033[0;35m\] \[\033[1;36m\]# \[\033[0m\]'
      HOME: /tmp
      APP_DEBUG: 'true'
      APP_ENV: local
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      DB_CONNECTION: mysql
      DB_HOST: mariadb
      DB_DATABASE: forge
      DB_USERNAME: forge
      DB_PASSWORD: forge
      DB_PORT: 3306
      QUEUE_CONNECTION: redis
      OTEL_SPANS_URL: http://localhost:9412/api/v2/spans
    volumes:
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - tmp-data:/tmp:rw
      - .:/app:rw
    depends_on:
      mariadb: {condition: service_healthy}
      redis: {condition: service_healthy}

  web:
    <<: *app
    command: rr serve -c .rr.local.yaml
    ports:
      - '8080:8080/tcp'
      - '8443:8443/tcp'
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q "http://127.0.0.1:8082/health?plugin=http&plugin=rpc"']
      interval: 2s
      timeout: 2s

  queue:
    <<: *app
    command: php /app/artisan horizon

  cron:
    <<: *app
    command: supercronic /etc/supercronic/laravel # it runs artisan schedule:run

  mariadb:
    image: mariadb:latest # Image page: <https://hub.docker.com/_/mariadb>
    environment:
      MARIADB_USER: forge
      MARIADB_PASSWORD: forge
      MARIADB_DATABASE: forge
      MARIADB_ROOT_PASSWORD: forge
      MARIADB_PORT: 3306
    volumes:
      - db-data:/var/lib/mysql:rw
    ports:
      - '3306/tcp'
    healthcheck: # Healthcheck docs: <https://docs.docker.com/engine/reference/builder/#healthcheck>
      test: ['CMD-SHELL', "mysqladmin ping -P $$(echo $$MARIADB_PORT) -p$$(echo $$MARIADB_ROOT_PASSWORD) | grep 'mysqld is alive' || exit 1"]
      interval: 2s
      timeout: 5s
      start_period: 2s

  redis:
    image: redis:7-alpine # Image page: <https://hub.docker.com/_/redis>
    command: redis-server --requirepass redis_password
    volumes:
      - redis-data:/data:rw
    ports:
      - '6379/tcp'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 500ms
      timeout: 1s
